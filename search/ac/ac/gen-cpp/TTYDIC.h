/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef TTYDIC_H
#define TTYDIC_H

#include <TProcessor.h>
#include "ttydic_types.h"

namespace Jingoo {

class TTYDICIf {
 public:
  virtual ~TTYDICIf() {}
  virtual void search(std::vector<std::string> & _return, const std::string& text) = 0;
};

class TTYDICNull : virtual public TTYDICIf {
 public:
  virtual ~TTYDICNull() {}
  void search(std::vector<std::string> & /* _return */, const std::string& /* text */) {
    return;
  }
};

class TTYDIC_search_args {
 public:

  TTYDIC_search_args() : text("") {
  }

  virtual ~TTYDIC_search_args() throw() {}

  std::string text;

  struct __isset {
    __isset() : text(false) {}
    bool text;
  } __isset;

  bool operator == (const TTYDIC_search_args & rhs) const
  {
    if (!(text == rhs.text))
      return false;
    return true;
  }
  bool operator != (const TTYDIC_search_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TTYDIC_search_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class TTYDIC_search_pargs {
 public:


  virtual ~TTYDIC_search_pargs() throw() {}

  const std::string* text;

  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class TTYDIC_search_result {
 public:

  TTYDIC_search_result() {
  }

  virtual ~TTYDIC_search_result() throw() {}

  std::vector<std::string>  success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  bool operator == (const TTYDIC_search_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TTYDIC_search_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TTYDIC_search_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class TTYDIC_search_presult {
 public:


  virtual ~TTYDIC_search_presult() throw() {}

  std::vector<std::string> * success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class TTYDICClient : virtual public TTYDICIf {
 public:
  TTYDICClient(boost::shared_ptr<apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  TTYDICClient(boost::shared_ptr<apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr<apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr<apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr<apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void search(std::vector<std::string> & _return, const std::string& text);
  void send_search(const std::string& text);
  void recv_search(std::vector<std::string> & _return);
 protected:
  boost::shared_ptr<apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr<apache::thrift::protocol::TProtocol> poprot_;
  apache::thrift::protocol::TProtocol* iprot_;
  apache::thrift::protocol::TProtocol* oprot_;
};

class TTYDICProcessor : virtual public apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<TTYDICIf> iface_;
  virtual bool process_fn(apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid);
 private:
  std::map<std::string, void (TTYDICProcessor::*)(int32_t, apache::thrift::protocol::TProtocol*, apache::thrift::protocol::TProtocol*)> processMap_;
  void process_search(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
 public:
  TTYDICProcessor(boost::shared_ptr<TTYDICIf> iface) :
    iface_(iface) {
    processMap_["search"] = &TTYDICProcessor::process_search;
  }

  virtual bool process(boost::shared_ptr<apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr<apache::thrift::protocol::TProtocol> poprot);
  virtual ~TTYDICProcessor() {}
};

class TTYDICMultiface : virtual public TTYDICIf {
 public:
  TTYDICMultiface(std::vector<boost::shared_ptr<TTYDICIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~TTYDICMultiface() {}
 protected:
  std::vector<boost::shared_ptr<TTYDICIf> > ifaces_;
  TTYDICMultiface() {}
  void add(boost::shared_ptr<TTYDICIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void search(std::vector<std::string> & _return, const std::string& text) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->search(_return, text);
        return;
      } else {
        ifaces_[i]->search(_return, text);
      }
    }
  }

};

} // namespace

#endif
