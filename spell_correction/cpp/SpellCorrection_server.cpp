// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "SpellCorrection.h"
#include <protocol/TBinaryProtocol.h>
#include <server/TSimpleServer.h>
#include <transport/TServerSocket.h>
#include <transport/TBufferTransports.h>
#include <iostream>
#include <time.h>
#include <sys/time.h>
#include "../correctme.h"

double gettimeofday_sec()
{
  struct timeval tv;
  gettimeofday(&tv, NULL);
  return tv.tv_sec + (double)tv.tv_usec*1e-6;
}

using namespace apache::thrift;
using namespace apache::thrift::protocol;
using namespace apache::thrift::transport;
using namespace apache::thrift::server;

using boost::shared_ptr;

using namespace Adingo;

class SpellCorrectionHandler : virtual public SpellCorrectionIf {
 public:
  SpellCorrectionHandler() {
    // Your initialization goes here
    const char *file = "inv.idx";
    strs_map map;
    double t1 = gettimeofday_sec();
    if (!map_index(map_, file)) {
      std::cerr << "mapping index failed." << std::endl;
    }
    double t2 = gettimeofday_sec();
    std::cout << "time stored: " << t2 - t1 << std::endl;
  }

  void correctme(std::vector<std::vector<std::string> > & _return, const std::vector<std::string> & queries) {
    // Your implementation goes here
    double t1 = gettimeofday_sec();
    _return = correct(map_, const_cast<std::vector<std::string> &>(queries));
    double t2 = gettimeofday_sec();
    std::cout << "correct time: " << t2 - t1 << std::endl;
  }
 private:
  strs_map map_;
};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<SpellCorrectionHandler> handler(new SpellCorrectionHandler());
  shared_ptr<TProcessor> processor(new SpellCorrectionProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

